{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","helper.js","index.js"],"names":["Square","value","onClick","style","className","Board","squares","map","square","i","key","id","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXisNext","winner","lines","length","a","b","c","calculateWinner","xO","historyPoint","slice","current","ReactDom","render","document","getElementById"],"mappings":"+MAEA,IAUeA,EAVA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACjBC,EAAQF,EAAK,kBAAcA,GAAd,UAEnB,OACE,4BAAQG,UAAWD,EAAOD,QAASA,GAChCD,ICKQI,EATD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASJ,EAAZ,EAAYA,QAAZ,OACZ,yBAAKE,UAAU,SACZE,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACX,kBAAC,EAAD,CAAQC,IAAKD,EAAGR,MAAOO,EAAQN,QAAS,kBAAMA,EAAQO,SAExD,wBAAIE,GAAG,aC+CIC,EAnDF,WAAO,IAAD,EACeC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QADvC,mBACRC,EADQ,KACCC,EADD,OAEqBJ,mBAAS,GAF9B,mBAERK,EAFQ,KAEIC,EAFJ,OAGeN,oBAAS,GAHxB,mBAGRO,EAHQ,KAGCC,EAHD,KAITC,ECRH,SAAyBhB,GAW9B,IAVA,IAAMiB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAd,EAAI,EAAGA,EAAIc,EAAMC,OAAQf,IAAK,CAAC,IAAD,cACnBc,EAAMd,GADa,GAC9BgB,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIrB,EAAQmB,IAAMnB,EAAQmB,KAAOnB,EAAQoB,IAAMpB,EAAQmB,KAAOnB,EAAQqB,GACpE,OAAOrB,EAAQmB,GAGnB,OAAO,KDTUG,CAAgBZ,EAAQE,IACjCW,EAAKT,EAAU,IAAM,IA8B3B,OACI,oCACI,2CACA,kBAAC,EAAD,CAAOd,QAASU,EAAQE,GAAahB,QA/BzB,SAACO,GACjB,IAAMqB,EAAed,EAAQe,MAAM,EAAGb,EAAa,GAC7Cc,EAAUF,EAAaZ,GACvBZ,EAAO,YAAO0B,GAEhBV,GAAUhB,EAAQG,KAEtBH,EAAQG,GAAKoB,EACbZ,EAAW,GAAD,mBAAKa,GAAL,CAAmBxB,KAC7Ba,EAAcW,EAAaN,QAC3BH,GAAYD,OAsBR,yBAAKhB,UAAU,gBAKX,4BAAKkB,EAAM,iBAAaA,EAAb,0BAAuCO,EAAvC,aACX,4BAAQ3B,QAAS,kBAAMiB,EAAc,KAArC,YE5ChBc,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,U","file":"static/js/main.b41f5537.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Square = ({ value, onClick }) => {\r\n  const style = value ? `squares ${value}` : `squares`;\r\n\r\n  return (\r\n    <button className={style} onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nconst Board = ({ squares, onClick }) => (\r\n  <div className=\"board\">\r\n    {squares.map((square, i) => (\r\n      <Square key={i} value={square} onClick={() => onClick(i)} />\r\n    ))}\r\n    <hr id=\"strike\"/>\r\n  </div>\r\n);\r\n\r\nexport default Board;\r\n","import React, { useState } from \"react\";\r\nimport { calculateWinner } from \"../helper\";\r\nimport Board from \"./Board\";\r\n\r\nconst Game = () => {\r\n    const [history, setHistory] = useState([Array(9).fill(null)]);\r\n    const [stepNumber, setStepNumber] = useState(0);\r\n    const [xIsNext, setXisNext] = useState(true);\r\n    const winner = calculateWinner(history[stepNumber]);\r\n    const xO = xIsNext ? \"X\" : \"O\";\r\n\r\n    const handleClick = (i) => {\r\n        const historyPoint = history.slice(0, stepNumber + 1);\r\n        const current = historyPoint[stepNumber];\r\n        const squares = [...current];\r\n        // return if won or occupied\r\n        if (winner || squares[i]) return;\r\n        // select square\r\n        squares[i] = xO;\r\n        setHistory([...historyPoint, squares]);\r\n        setStepNumber(historyPoint.length);\r\n        setXisNext(!xIsNext);\r\n    };\r\n\r\n    const jumpTo = (step) => {\r\n        setStepNumber(step);\r\n        setXisNext(step % 2 === 0);\r\n    };\r\n\r\n    const renderMoves = () =>\r\n        history.map((_step, move) => {\r\n            const destination = move ? `Go to move #${move}` : \"Go to Start\";\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={() => jumpTo(move)}>{destination}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n    return (\r\n        <>\r\n            <h1>Tic Tac Toe</h1>\r\n            <Board squares={history[stepNumber]} onClick={handleClick} />\r\n            <div className=\"info-wrapper\">\r\n                {/* <div>\r\n          <h3>History</h3>\r\n          {renderMoves()}\r\n        </div> */}\r\n                <h3>{winner ? `Player ${winner} won!` : `Player ${xO}'s turn.`}</h3>\r\n                <button onClick={() => setStepNumber(0)}>Reset</button>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n","export function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Game from \"./components/Game\";\r\n\r\nReactDom.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}